/*
 * 
 * ALEServicePortTypeImpl.java
 *  
 * Created:     July 8th, 2009
 * Project:       Rifidi Edge Server - A middleware platform for RFID applications
 *                   http://www.rifidi.org
 *                   http://rifidi.sourceforge.net
 * Copyright:   Pramari LLC and the Rifidi Project
 * License:      The software in this package is published under the terms of the GPL License
 *                   A copy of the license is included in this distribution under RifidiEdge-License.txt 
 */
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.rifidi.edge.epcglobal.ale.api.read.ws;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.rifidi.edge.core.sensors.management.SensorManagementService;
import org.rifidi.edge.epcglobal.ale.api.read.data.ECReportSpec;
import org.rifidi.edge.epcglobal.aleread.ALEReadAPI;
import org.rifidi.edge.epcglobal.aleread.service.ECSPECManagerService;
import org.rifidi.edge.epcglobal.aleread.service.RifidiReportFactory;
import org.rifidi.edge.epcglobal.aleread.wrappers.RifidiBoundarySpec;
import org.rifidi.edge.epcglobal.aleread.wrappers.RifidiReport;

/**
 * This class was generated by Apache CXF 2.1.3 Wed Jan 28 17:30:03 EST 2009
 * Generated source version: 2.1.3
 * 
 */

@javax.jws.WebService(serviceName = "ALEService", portName = "ALEServicePort", targetNamespace = "urn:epcglobal:ale:wsdl:1", wsdlLocation = "org/rifidi/edge/epcglobal/ale/api/read/ws/epcglobal-ale-1_1-ale.wsdl", endpointInterface = "org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType")
public class ALEServicePortTypeImpl implements ALEServicePortType {

	/** Logger for this class. */
	private static final Log logger = LogFactory
			.getLog(ALEServicePortTypeImpl.class);
	/** Service that manages the ecspecs. */
	private ECSPECManagerService ecspecManagerService;
	/** Service for managing logical readers. */
	private SensorManagementService sensorManagementBinding;
	/** Factory for creating reports. */
	private RifidiReportFactory reportFactory;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#undefine
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.Undefine parms )
	 */
	public synchronized org.rifidi.edge.epcglobal.ale.api.read.ws.VoidHolder undefine(
			Undefine parms) throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse, SecurityExceptionResponse {
		for (String reader : ecspecManagerService.getSpecByName(
				parms.getSpecName()).getLogicalReaders().getLogicalReader()) {
			// relese the individual sensors
		}
		ecspecManagerService.destroySpec(parms.getSpecName());
		return new VoidHolder();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#getECSpecNames
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.EmptyParms parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.ArrayOfString getECSpecNames(
			EmptyParms parms) throws ImplementationExceptionResponse,
			SecurityExceptionResponse {
		logger.info("Executing operation getECSpecNames");
		ArrayOfString ret = new ArrayOfString();
		ret.getString().addAll(ecspecManagerService.getNames());
		return ret;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#immediate
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.Immediate parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.data.ECReports immediate(
			Immediate parms) throws ImplementationExceptionResponse,
			SecurityExceptionResponse, ECSpecValidationExceptionResponse {
		logger.info("Executing operation immediate");
		try {
			org.rifidi.edge.epcglobal.ale.api.read.data.ECReports _return = null;
			return _return;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new
		// ImplementationExceptionResponse("ImplementationExceptionResponse...");
		// throw new SecurityExceptionResponse("SecurityExceptionResponse...");
		// throw new
		// ECSpecValidationExceptionResponse("ECSpecValidationExceptionResponse...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#define(org
	 * .rifidi.edge.epcglobal.ale.api.read.ws.Define parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.VoidHolder define(
			Define parms) throws ImplementationExceptionResponse,
			SecurityExceptionResponse, ECSpecValidationExceptionResponse,
			DuplicateNameExceptionResponse {
		logger.info("Executing operation define");
		// check if we got a boundary spec line 2137
		if (parms.getSpec().getBoundarySpec() == null) {
			throw new ECSpecValidationExceptionResponse(
					"No boundary spec specified.");
		}

		// validate boundary spec and extract data
		RifidiBoundarySpec rifidiBoundarySpec = null;
		try {
			rifidiBoundarySpec = new RifidiBoundarySpec(parms.getSpec()
					.getBoundarySpec());
		} catch (InvalidURIExceptionResponse e) {
			throw new ECSpecValidationExceptionResponse(e.toString());
		}

		// check if we got valid logical readers line 2135 of spec
		if (parms.getSpec().getLogicalReaders() == null
				|| parms.getSpec().getLogicalReaders().getLogicalReader() == null
				|| parms.getSpec().getLogicalReaders().getLogicalReader()
						.size() == 0) {
			throw new ECSpecValidationExceptionResponse(
					"No logical readers were provided.");
		}
		String currentReader = "";
		// try {
		// for (String reader : parms.getSpec().getLogicalReaders()
		// .getLogicalReader()) {
		// currentReader = reader;
		// lrService.getLogicalReaderByName(reader).aquire(
		// parms.getSpecName());
		// readers.add(lrService.getLogicalReaderByName(reader));
		// }
		// } catch (NoSuchReaderNameException e) {
		// release all readers that have already been aquired
		// for (String reader : parms.getSpec().getLogicalReaders()
		// .getLogicalReader()) {
		// try {
		// lrService.getLogicalReaderByName(reader).release(this);
		// } catch (NoSuchReaderNameException ex) {
		// logger.debug("Reader " + reader + " doesn't exist");
		// }
		// }
		// throw new ECSpecValidationExceptionResponse("Logical reader "
		// + currentReader + " doesn't exist.");
		// }
		// collect the primary keys
		Set<String> primarykeys = new HashSet<String>();
		if (parms.getSpec().getExtension() != null
				&& parms.getSpec().getExtension().getPrimaryKeyFields() != null) {
			primarykeys.addAll(parms.getSpec().getExtension()
					.getPrimaryKeyFields().getPrimaryKeyField());
		} else {
			primarykeys = new HashSet<String>();
		}
		// check if all keys are valid.
		// TODO: find a way to use @ keys in esper
		for (String key : primarykeys) {
			if (!ALEReadAPI.aleIdToEnum.keySet().contains(key)) {
				throw new ECSpecValidationExceptionResponse(key
						+ " is not a valid field.");
			} else if (key.startsWith("@")) {
				throw new ECSpecValidationExceptionResponse("Fields of type "
						+ key + " are currently not supported.");
			}
		}
		// if no primary key is given the epc is the key
		if (primarykeys.size() == 0) {
			primarykeys.add("epc");
		}

		// create the reports
		if (parms.getSpec().getReportSpecs() == null
				|| parms.getSpec().getReportSpecs().getReportSpec() == null
				|| parms.getSpec().getReportSpecs().getReportSpec().size() == 0) {
			throw new ECSpecValidationExceptionResponse("No ECSpecs specified.");
		}
		List<RifidiReport> reports = new ArrayList<RifidiReport>();
		for (ECReportSpec spec : parms.getSpec().getReportSpecs()
				.getReportSpec()) {
			if (spec.getOutput() == null) {
				throw new ECSpecValidationExceptionResponse(
						"Output spec is missing.");
			}
			reports.add(reportFactory.createReport(spec));
		}
		ecspecManagerService.createSpec(parms.getSpecName(), parms.getSpec(),
				rifidiBoundarySpec, parms.getSpec().getLogicalReaders().getLogicalReader(), primarykeys, reports);
		org.rifidi.edge.epcglobal.ale.api.read.ws.VoidHolder _return = null;
		return _return;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#unsubscribe
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.Unsubscribe parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.VoidHolder unsubscribe(
			Unsubscribe parms) throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse, NoSuchSubscriberExceptionResponse,
			SecurityExceptionResponse, InvalidURIExceptionResponse {
		logger.info("Executing operation unsubscribe");
		ecspecManagerService.unsubscribe(parms.getSpecName(), parms
				.getNotificationURI());
		return new VoidHolder();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#getECSpec
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.GetECSpec parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.data.ECSpec getECSpec(
			GetECSpec parms) throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse, SecurityExceptionResponse {
		logger.info("Executing operation getECSpec");
		return ecspecManagerService.getSpecByName(parms.getSpecName());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#getVendorVersion
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.EmptyParms parms )
	 */
	public java.lang.String getVendorVersion(EmptyParms parms)
			throws ImplementationExceptionResponse {
		logger.info("Executing operation getVendorVersion");
		java.lang.String _return = "1.0";
		return _return;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#getSubscribers
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.GetSubscribers parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.ArrayOfString getSubscribers(
			GetSubscribers parms) throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse, SecurityExceptionResponse {
		logger.info("Executing operation getSubscribers");
		try {
			org.rifidi.edge.epcglobal.ale.api.read.ws.ArrayOfString _return = new ArrayOfString();
			_return.getString().addAll(
					ecspecManagerService.getSubscriptions(parms.getSpecName()));
			return _return;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new
		// ImplementationExceptionResponse("ImplementationExceptionResponse...");
		// throw new
		// NoSuchNameExceptionResponse("NoSuchNameExceptionResponse...");
		// throw new SecurityExceptionResponse("SecurityExceptionResponse...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#poll(org
	 * .rifidi.edge.epcglobal.ale.api.read.ws.Poll parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.data.ECReports poll(Poll parms)
			throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse, SecurityExceptionResponse {
		logger.info("Executing operation poll");
		try {
			org.rifidi.edge.epcglobal.ale.api.read.data.ECReports _return = null;
			return _return;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new
		// ImplementationExceptionResponse("ImplementationExceptionResponse...");
		// throw new
		// NoSuchNameExceptionResponse("NoSuchNameExceptionResponse...");
		// throw new SecurityExceptionResponse("SecurityExceptionResponse...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @seeorg.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#
	 * getStandardVersion(org.rifidi.edge.epcglobal.ale.api.read.ws.EmptyParms
	 * parms )
	 */
	public java.lang.String getStandardVersion(EmptyParms parms)
			throws ImplementationExceptionResponse {
		logger.info("Executing operation getStandardVersion");
		java.lang.String _return = "1.1";
		return _return;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#subscribe
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.Subscribe parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.VoidHolder subscribe(
			Subscribe parms) throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse,
			DuplicateSubscriptionExceptionResponse, SecurityExceptionResponse,
			InvalidURIExceptionResponse {
		logger.info("Executing operation subscribe");
		ecspecManagerService.subscribe(parms.getSpecName(), parms
				.getNotificationURI());
		return new VoidHolder();
	}

	/**
	 * @param ecspecManagerService
	 *            the ecspecManagerService to set
	 */
	public void setEcspecManagerService(
			ECSPECManagerService ecspecManagerService) {
		this.ecspecManagerService = ecspecManagerService;
	}

	/**
	 * @param sensorManagementBinding
	 *            the sensorManagementBinding to set
	 */
	public void setSensorManagementBinding(
			SensorManagementService sensorManagementBinding) {
		this.sensorManagementBinding = sensorManagementBinding;
	}

	/**
	 * @param reportFactory
	 *            the reportFactory to set
	 */
	public void setReportFactory(RifidiReportFactory reportFactory) {
		this.reportFactory = reportFactory;
	}
}
