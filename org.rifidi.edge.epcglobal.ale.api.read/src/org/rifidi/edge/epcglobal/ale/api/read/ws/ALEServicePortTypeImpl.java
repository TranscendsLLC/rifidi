/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.rifidi.edge.epcglobal.ale.api.read.ws;

import java.net.MalformedURLException;
import java.net.URL;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.rifidi.edge.epcglobal.aleread.ECSPECManagerService;
import org.rifidi.edge.lr.LogicalReaderManagementService;
import org.rifidi.edge.wsmanagement.WebService;

/**
 * This class was generated by Apache CXF 2.1.3 Wed Jan 28 17:30:03 EST 2009
 * Generated source version: 2.1.3
 * 
 */

@javax.jws.WebService(serviceName = "ALEService", portName = "ALEServicePort", targetNamespace = "urn:epcglobal:ale:wsdl:1", wsdlLocation = "org/rifidi/edge/epcglobal/ale/api/read/ws/epcglobal-ale-1_1-ale.wsdl", endpointInterface = "org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType")
public class ALEServicePortTypeImpl implements ALEServicePortType, WebService {

	/** Logger for this class. */
	private static final Log logger = LogFactory
			.getLog(ALEServicePortTypeImpl.class);
	/** Service that manages the ecspecs. */
	private ECSPECManagerService ecspecManagerService;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#undefine
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.Undefine parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.VoidHolder undefine(
			Undefine parms) throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse, SecurityExceptionResponse {
		logger.info("Executing operation undefine");
		return new VoidHolder();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#getECSpecNames
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.EmptyParms parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.ArrayOfString getECSpecNames(
			EmptyParms parms) throws ImplementationExceptionResponse,
			SecurityExceptionResponse {
		logger.info("Executing operation getECSpecNames");
		ArrayOfString ret = new ArrayOfString();
		ret.getString().addAll(ecspecManagerService.getNames());
		return ret;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#immediate
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.Immediate parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.data.ECReports immediate(
			Immediate parms) throws ImplementationExceptionResponse,
			SecurityExceptionResponse, ECSpecValidationExceptionResponse {
		logger.info("Executing operation immediate");
		System.out.println(parms);
		try {
			org.rifidi.edge.epcglobal.ale.api.read.data.ECReports _return = null;
			return _return;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new
		// ImplementationExceptionResponse("ImplementationExceptionResponse...");
		// throw new SecurityExceptionResponse("SecurityExceptionResponse...");
		// throw new
		// ECSpecValidationExceptionResponse("ECSpecValidationExceptionResponse...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#define(org
	 * .rifidi.edge.epcglobal.ale.api.read.ws.Define parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.VoidHolder define(
			Define parms) throws ImplementationExceptionResponse,
			SecurityExceptionResponse, ECSpecValidationExceptionResponse,
			DuplicateNameExceptionResponse {
		logger.info("Executing operation define");
		ecspecManagerService.createSpec(parms.getSpecName(), parms.getSpec());
		org.rifidi.edge.epcglobal.ale.api.read.ws.VoidHolder _return = null;
		return _return;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#unsubscribe
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.Unsubscribe parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.VoidHolder unsubscribe(
			Unsubscribe parms) throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse, NoSuchSubscriberExceptionResponse,
			SecurityExceptionResponse, InvalidURIExceptionResponse {
		logger.info("Executing operation unsubscribe");
		ecspecManagerService.unsubscribe(parms.getSpecName(), parms
				.getNotificationURI());
		return new VoidHolder();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#getECSpec
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.GetECSpec parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.data.ECSpec getECSpec(
			GetECSpec parms) throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse, SecurityExceptionResponse {
		logger.info("Executing operation getECSpec");
		return ecspecManagerService.getSpecByName(parms.getSpecName());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#getVendorVersion
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.EmptyParms parms )
	 */
	public java.lang.String getVendorVersion(EmptyParms parms)
			throws ImplementationExceptionResponse {
		logger.info("Executing operation getVendorVersion");
		java.lang.String _return = "1.0";
		return _return;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#getSubscribers
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.GetSubscribers parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.ArrayOfString getSubscribers(
			GetSubscribers parms) throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse, SecurityExceptionResponse {
		logger.info("Executing operation getSubscribers");
		System.out.println(parms);
		try {
			org.rifidi.edge.epcglobal.ale.api.read.ws.ArrayOfString _return = null;
			return _return;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new
		// ImplementationExceptionResponse("ImplementationExceptionResponse...");
		// throw new
		// NoSuchNameExceptionResponse("NoSuchNameExceptionResponse...");
		// throw new SecurityExceptionResponse("SecurityExceptionResponse...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#poll(org
	 * .rifidi.edge.epcglobal.ale.api.read.ws.Poll parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.data.ECReports poll(Poll parms)
			throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse, SecurityExceptionResponse {
		logger.info("Executing operation poll");
		System.out.println(parms);
		try {
			org.rifidi.edge.epcglobal.ale.api.read.data.ECReports _return = null;
			return _return;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new
		// ImplementationExceptionResponse("ImplementationExceptionResponse...");
		// throw new
		// NoSuchNameExceptionResponse("NoSuchNameExceptionResponse...");
		// throw new SecurityExceptionResponse("SecurityExceptionResponse...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @seeorg.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#
	 * getStandardVersion(org.rifidi.edge.epcglobal.ale.api.read.ws.EmptyParms
	 * parms )
	 */
	public java.lang.String getStandardVersion(EmptyParms parms)
			throws ImplementationExceptionResponse {
		logger.info("Executing operation getStandardVersion");
		java.lang.String _return = "1.1";
		return _return;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.read.ws.ALEServicePortType#subscribe
	 * (org.rifidi.edge.epcglobal.ale.api.read.ws.Subscribe parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.read.ws.VoidHolder subscribe(
			Subscribe parms) throws ImplementationExceptionResponse,
			NoSuchNameExceptionResponse,
			DuplicateSubscriptionExceptionResponse, SecurityExceptionResponse,
			InvalidURIExceptionResponse {
		logger.info("Executing operation subscribe");
		ecspecManagerService.subscribe(parms.getSpecName(), parms
				.getNotificationURI());
		return new VoidHolder();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.rifidi.edge.wsmanagement.WebService#getService()
	 */
	@Override
	public Object getService() {
		return this;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.rifidi.edge.wsmanagement.WebService#getUrl()
	 */
	@Override
	public URL getUrl() {
		try {
			return new URL("http://127.0.0.1:8081/aleread");
		} catch (MalformedURLException e) {
			logger.fatal("That should not happen: " + e);
		}
		return null;
	}
	
	/**
	 * @param ecspecManagerService
	 *            the ecspecManagerService to set
	 */
	public void setEcspecManagerService(
			ECSPECManagerService ecspecManagerService) {
		this.ecspecManagerService = ecspecManagerService;
	}
}
