/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.rifidi.edge.epcglobal.ale.api.lr.ws;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.rifidi.edge.epcglobal.ale.api.lr.data.LRProperty;
import org.rifidi.edge.lr.CompositeLogicalReader;
import org.rifidi.edge.lr.LogicalReader;
import org.rifidi.edge.lr.LogicalReaderManagementService;
import org.rifidi.edge.lr.exceptions.DuplicateReaderNameException;
import org.rifidi.edge.lr.exceptions.ImmutableReaderException;
import org.rifidi.edge.lr.exceptions.NoSuchReaderNameException;
import org.rifidi.edge.lr.exceptions.ReaderInUseException;

/**
 * This class was generated by Apache CXF 2.1.3 Thu Jan 29 11:03:18 EST 2009
 * Generated source version: 2.1.3
 * 
 */

@javax.jws.WebService(serviceName = "ALELRService", portName = "ALELRServicePort", targetNamespace = "urn:epcglobal:alelr:wsdl:1", wsdlLocation = "org/rifidi/edge/epcglobal/ale/api/lr/ws/epcglobal-ale-1_1-alelr.wsdl", endpointInterface = "org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType")
public class ALELRServicePortTypeImpl implements ALELRServicePortType,
		org.rifidi.edge.core.services.soap.WebService {
	/** Logger for this class. */
	private static final Log logger = LogFactory
			.getLog(ALELRServicePortTypeImpl.class);
	/** Logical readers management service. */
	private LogicalReaderManagementService service;
	/** The port to expose this ALE LR WS at */
	private int alePort = -1;
	/** The hostname of the machine that makes this ALE LR WS available */
	private String aleHost = null;
	/** The path to the ALE LR WS */
	private String alePath = null;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#getLRSpec
	 * (org.rifidi.edge.epcglobal.ale.api.lr.ws.GetLRSpec parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.lr.data.LRSpec getLRSpec(
			GetLRSpec parms) throws SecurityExceptionResponse,
			ImplementationExceptionResponse, NoSuchNameExceptionResponse {
		logger.info("Executing operation getLRSpec");
		try {
			LogicalReader lr = service.getLogicalReaderByName(parms.getName());
			return lr.getLRSpec();
		} catch (NoSuchReaderNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @seeorg.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#
	 * getStandardVersion(org.rifidi.edge.epcglobal.ale.api.lr.ws.EmptyParms
	 * parms )
	 */
	public java.lang.String getStandardVersion(EmptyParms parms)
			throws ImplementationExceptionResponse {
		logger.info("Executing operation getStandardVersion");
		return "1.1";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#undefine
	 * (org.rifidi.edge.epcglobal.ale.api.lr.ws.Undefine parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.lr.ws.UndefineResult undefine(
			Undefine parms) throws SecurityExceptionResponse,
			InUseExceptionResponse, ImplementationExceptionResponse,
			ImmutableReaderExceptionResponse, NoSuchNameExceptionResponse {
		logger.info("Executing operation undefine");
		try {
			service.destroyLogicalReader(parms.getName());
		} catch (NoSuchReaderNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		} catch (ImmutableReaderException e) {
			throw new ImmutableReaderExceptionResponse(e.getMessage());
		} catch (ReaderInUseException e) {
			throw new InUseExceptionResponse(e.getMessage());
		}
		return new UndefineResult();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#define(org
	 * .rifidi.edge.epcglobal.ale.api.lr.ws.Define parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.lr.ws.DefineResult define(
			Define parms) throws SecurityExceptionResponse,
			ImplementationExceptionResponse, DuplicateNameExceptionResponse,
			ValidationExceptionResponse {
		logger.info("Executing operation define");
		try {
			// always create mutable readers via soap
			service
					.createLogicalReader(parms.getName(), parms.getSpec(),
							false);
		} catch (DuplicateReaderNameException e) {
			throw new DuplicateNameExceptionResponse(e.getMessage());
		} catch (NoSuchReaderNameException e) {
			throw new ValidationExceptionResponse(e.getMessage());
		}
		return new DefineResult();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#setProperties
	 * (org.rifidi.edge.epcglobal.ale.api.lr.ws.SetProperties parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.lr.ws.SetPropertiesResult setProperties(
			SetProperties parms) throws SecurityExceptionResponse,
			InUseExceptionResponse, ImplementationExceptionResponse,
			ImmutableReaderExceptionResponse, NoSuchNameExceptionResponse,
			ValidationExceptionResponse {
		logger.info("Executing operation setProperties");
		try {
			LogicalReader reader = service.getLogicalReaderByName(parms
					.getName());
			// TODO: lock the reader during this operation
			for (LRProperty prop : parms.getProperties().getProperty()) {
				logger.debug("Setting " + prop.getName() + " to "
						+ prop.getValue() + " on " + parms.getName());
				reader.setProperty(prop.getName(), prop.getValue());
			}
			return new SetPropertiesResult();
		} catch (NoSuchReaderNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#removeReaders
	 * (org.rifidi.edge.epcglobal.ale.api.lr.ws.RemoveReaders parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.lr.ws.RemoveReadersResult removeReaders(
			RemoveReaders parms) throws NonCompositeReaderExceptionResponse,
			SecurityExceptionResponse, InUseExceptionResponse,
			ImplementationExceptionResponse, ImmutableReaderExceptionResponse,
			NoSuchNameExceptionResponse {
		logger.info("Executing operation removeReaders");
		try {
			LogicalReader lr = service.getLogicalReaderByName(parms.getName());
			if (lr instanceof CompositeLogicalReader) {
				for (String reader : parms.getReaders().getReader()) {
					((CompositeLogicalReader) lr).removeReader(service
							.getLogicalReaderByName(reader));
				}
				return new RemoveReadersResult();
			}
		} catch (NoSuchReaderNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		} catch (ReaderInUseException e) {
			new InUseExceptionResponse(e.getMessage());
		} catch (ImmutableReaderException e) {
			new ImmutableReaderExceptionResponse(e.getMessage());
		}
		throw new NonCompositeReaderExceptionResponse("Reader "
				+ parms.getName() + " is not a composite reader.");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#addReaders
	 * (org.rifidi.edge.epcglobal.ale.api.lr.ws.AddReaders parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.lr.ws.AddReadersResult addReaders(
			AddReaders parms) throws ReaderLoopExceptionResponse,
			NonCompositeReaderExceptionResponse, SecurityExceptionResponse,
			InUseExceptionResponse, ImplementationExceptionResponse,
			ImmutableReaderExceptionResponse, NoSuchNameExceptionResponse,
			ValidationExceptionResponse {
		logger.info("Executing operation addReaders");
		try {
			LogicalReader lr = service.getLogicalReaderByName(parms.getName());
			if (lr == null) {
				throw new NoSuchNameExceptionResponse("No reader named "
						+ parms.getName());
			}
			if (lr instanceof CompositeLogicalReader) {
				for (String reader : parms.getReaders().getReader()) {
					((CompositeLogicalReader) lr).addReader(service
							.getLogicalReaderByName(reader));
				}
				return new AddReadersResult();
			}
		} catch (NoSuchReaderNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		} catch (ReaderInUseException e) {
			new InUseExceptionResponse(e.getMessage());
		} catch (ImmutableReaderException e) {
			new ImmutableReaderExceptionResponse(e.getMessage());
		}
		throw new NonCompositeReaderExceptionResponse("Reader "
				+ parms.getName() + " is not a composite reader.");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#update(org
	 * .rifidi.edge.epcglobal.ale.api.lr.ws.Update parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.lr.ws.UpdateResult update(
			Update parms) throws ReaderLoopExceptionResponse,
			SecurityExceptionResponse, InUseExceptionResponse,
			ImplementationExceptionResponse, ImmutableReaderExceptionResponse,
			NoSuchNameExceptionResponse, ValidationExceptionResponse {
		logger.info("Executing operation update");
		try {
			Map<String, String> props = new HashMap<String, String>();
			for (LRProperty prop : parms.getSpec().getProperties()
					.getProperty()) {
				props.put(prop.getName(), prop.getValue());
			}
			Set<LogicalReader> readers = new HashSet<LogicalReader>();
			for (String reader : parms.getSpec().getReaders().getReader()) {
				readers.add(service.getLogicalReaderByName(reader));
			}
			service.getLogicalReaderByName(parms.getName()).update(props,
					readers);
			return new UpdateResult();
		} catch (NoSuchReaderNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#setReaders
	 * (org.rifidi.edge.epcglobal.ale.api.lr.ws.SetReaders parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.lr.ws.SetReadersResult setReaders(
			SetReaders parms) throws ReaderLoopExceptionResponse,
			NonCompositeReaderExceptionResponse, SecurityExceptionResponse,
			InUseExceptionResponse, ImplementationExceptionResponse,
			ImmutableReaderExceptionResponse, NoSuchNameExceptionResponse,
			ValidationExceptionResponse {
		logger.info("Executing operation setReaders");
		try {
			LogicalReader lr = service.getLogicalReaderByName(parms.getName());
			if (lr instanceof CompositeLogicalReader) {
				Set<LogicalReader> readers = new HashSet<LogicalReader>();
				for (String reader : parms.getReaders().getReader()) {
					readers.add(service.getLogicalReaderByName(reader));
				}
				((CompositeLogicalReader) lr).setReaders(readers);
				return new SetReadersResult();
			}
		} catch (NoSuchReaderNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		} catch (ReaderInUseException e) {
			new InUseExceptionResponse(e.getMessage());
		} catch (ImmutableReaderException e) {
			new ImmutableReaderExceptionResponse(e.getMessage());
		}

		throw new NonCompositeReaderExceptionResponse("Reader "
				+ parms.getName() + " is not a composite reader.");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#getVendorVersion
	 * (org.rifidi.edge.epcglobal.ale.api.lr.ws.EmptyParms parms )
	 */
	public java.lang.String getVendorVersion(EmptyParms parms)
			throws ImplementationExceptionResponse {
		logger.info("Executing operation getVendorVersion");
		return "1.0";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @seeorg.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#
	 * getLogicalReaderNames(org.rifidi.edge.epcglobal.ale.api.lr.ws.EmptyParms
	 * parms )
	 */
	public org.rifidi.edge.epcglobal.ale.api.lr.ws.ArrayOfString getLogicalReaderNames(
			EmptyParms parms) throws SecurityExceptionResponse,
			ImplementationExceptionResponse {
		logger.info("Executing operation getLogicalReaderNames");
		ArrayOfString ret = new ArrayOfString();
		ret.getString().addAll(service.getLogicalReaders());
		return ret;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#getPropertyValue
	 * (org.rifidi.edge.epcglobal.ale.api.lr.ws.GetPropertyValue parms )
	 */
	public java.lang.String getPropertyValue(GetPropertyValue parms)
			throws SecurityExceptionResponse, ImplementationExceptionResponse,
			NoSuchNameExceptionResponse {
		logger.info("Executing operation getPropertyValue");
		try {
			LogicalReader reader = service.getLogicalReaderByName(parms
					.getName());
			return reader.getProperty(parms.getPropertyName());
		} catch (NoSuchReaderNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.rifidi.edge.wsmanagement.WebService#getService()
	 */
	@Override
	public Object getService() {
		return this;
	}

	/**
	 * @param service
	 *            the service to set
	 */
	public void setLRService(LogicalReaderManagementService service) {
		this.service = service;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.rifidi.edge.wsmanagement.WebService#getUrl()
	 */
	@Override
	public URL getUrl() {
		String url = "http://" + aleHost + ":" + alePort + "/" + alePath;
		try {
			return new URL(url);
		} catch (MalformedURLException e) {
			logger.fatal("That should not happen: " + e);
		}
		return null;
	}

	/**
	 * @param alePort
	 *            the alePort to set
	 */
	public void setAlePort(int alePort) {
		this.alePort = alePort;
	}

	/**
	 * @param aleHost
	 *            the aleHost to set
	 */
	public void setAleHost(String aleHost) {
		this.aleHost = aleHost;
	}

	/**
	 * @param alePath
	 *            the alePath to set
	 */
	public void setAlePath(String alePath) {
		this.alePath = alePath;
	}

}
