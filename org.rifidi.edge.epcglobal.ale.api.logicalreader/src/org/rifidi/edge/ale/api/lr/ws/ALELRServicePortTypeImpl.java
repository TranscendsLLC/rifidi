/*
 * 
 * ALELRServicePortTypeImpl.java
 *  
 * Created:     July 8th, 2009
 * Project:       Rifidi Edge Server - A middleware platform for RFID applications
 *                   http://www.rifidi.org
 *                   http://rifidi.sourceforge.net
 * Copyright:   Pramari LLC and the Rifidi Project
 * License:      The software in this package is published under the terms of the GPL License
 *                   A copy of the license is included in this distribution under RifidiEdge-License.txt 
 */
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.rifidi.edge.ale.api.lr.ws;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.rifidi.edge.ale.api.lr.data.LRSpec;
import org.rifidi.edge.ale.api.lr.data.LRSpec.Properties;
import org.rifidi.edge.sensors.DuplicateSensorNameException;
import org.rifidi.edge.sensors.ImmutableException;
import org.rifidi.edge.sensors.InUseException;
import org.rifidi.edge.sensors.NoSuchSensorException;
import org.rifidi.edge.sensors.SensorDTO;
import org.rifidi.edge.sensors.SensorManagementService;

/**
 * This class was generated by Apache CXF 2.1.3 Thu Jan 29 11:03:18 EST 2009
 * Generated source version: 2.1.3
 * 
 */

@javax.jws.WebService(serviceName = "ALELRService", portName = "ALELRServicePort", targetNamespace = "urn:epcglobal:alelr:wsdl:1", wsdlLocation = "org/rifidi/edge/epcglobal/ale/api/lr/ws/epcglobal-ale-1_1-alelr.wsdl", endpointInterface = "org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType")
public class ALELRServicePortTypeImpl implements ALELRServicePortType {
	/** Logger for this class. */
	private static final Log logger = LogFactory
			.getLog(ALELRServicePortTypeImpl.class);
	/** Logical readers management sensorManagementService. */
	private volatile SensorManagementService sensorManagementService;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType#getLRSpec
	 * (org.rifidi.edge.ale.api.lr.ws.GetLRSpec parms )
	 */
	public org.rifidi.edge.ale.api.lr.data.LRSpec getLRSpec(
			GetLRSpec parms) throws SecurityExceptionResponse,
			ImplementationExceptionResponse, NoSuchNameExceptionResponse {
		logger.info("Executing operation getLRSpec");
		try {
			SensorDTO dto=sensorManagementService.getDTO(parms.getName());
			LRSpec lrSpec = new LRSpec();
			lrSpec.setIsComposite(dto.isComposite());
			LRSpec.Readers readers=new LRSpec.Readers();
			readers.getReader().addAll(dto.getChildren());
			lrSpec.setReaders(readers);
			//TODO: implement properties
			Properties props = new Properties();
//			for (String key : properties.keySet()) {
//				LRProperty prop = new LRProperty();
//				prop.setName(key);
//				prop.setValue(properties.get(key));
//				props.getProperty().add(prop);
//			}
			lrSpec.setProperties(props);
			
			return lrSpec;
		} catch (NoSuchSensorException e) {
			logger.warn("Trying to get info about non existend reader "+parms.getName());
			throw new NoSuchNameExceptionResponse(e.toString());
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @seeorg.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#
	 * getStandardVersion(org.rifidi.edge.ale.api.lr.ws.EmptyParms
	 * parms )
	 */
	public java.lang.String getStandardVersion(EmptyParms parms)
			throws ImplementationExceptionResponse {
		logger.info("Executing operation getStandardVersion");
		return "1.1";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType#undefine
	 * (org.rifidi.edge.ale.api.lr.ws.Undefine parms )
	 */
	public org.rifidi.edge.ale.api.lr.ws.UndefineResult undefine(
			Undefine parms) throws SecurityExceptionResponse,
			InUseExceptionResponse, ImplementationExceptionResponse,
			ImmutableReaderExceptionResponse, NoSuchNameExceptionResponse {
		logger.info("Executing operation undefine");
		try {
			sensorManagementService.destroySensor(parms.getName());
		} catch (NoSuchSensorException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		} catch (ImmutableException e) {
			throw new ImmutableReaderExceptionResponse(e.getMessage());
		} catch (InUseException e) {
			throw new InUseExceptionResponse(e.getMessage());
		}
		return new UndefineResult();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType#define(org
	 * .rifidi.edge.epcglobal.ale.api.lr.ws.Define parms )
	 */
	public org.rifidi.edge.ale.api.lr.ws.DefineResult define(
			Define parms) throws SecurityExceptionResponse,
			ImplementationExceptionResponse, DuplicateNameExceptionResponse,
			ValidationExceptionResponse {
		logger.info("Executing operation define");
		try {
			// always create mutable readers via soap
			sensorManagementService.createSensor(parms.getName(), parms.getSpec().getReaders()
					.getReader());
		} catch (DuplicateSensorNameException e) {
			throw new DuplicateNameExceptionResponse(e.getMessage());
		} catch (NoSuchSensorException e) {
			throw new ValidationExceptionResponse(e.getMessage());
		}
		return new DefineResult();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType#setProperties
	 * (org.rifidi.edge.ale.api.lr.ws.SetProperties parms )
	 */
	public org.rifidi.edge.ale.api.lr.ws.SetPropertiesResult setProperties(
			SetProperties parms) throws SecurityExceptionResponse,
			InUseExceptionResponse, ImplementationExceptionResponse,
			ImmutableReaderExceptionResponse, NoSuchNameExceptionResponse,
			ValidationExceptionResponse {
		logger.info("Executing operation setProperties");
		// TODO: implement
		throw new ImplementationExceptionResponse("Not yet implemented.");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType#removeReaders
	 * (org.rifidi.edge.ale.api.lr.ws.RemoveReaders parms )
	 */
	public org.rifidi.edge.ale.api.lr.ws.RemoveReadersResult removeReaders(
			RemoveReaders parms) throws NonCompositeReaderExceptionResponse,
			SecurityExceptionResponse, InUseExceptionResponse,
			ImplementationExceptionResponse, ImmutableReaderExceptionResponse,
			NoSuchNameExceptionResponse {
		logger.info("Executing operation removeReaders");
		try {
			sensorManagementService.removeChildren(parms.getName(), parms.getReaders()
					.getReader());
			return new RemoveReadersResult();
		} catch (ImmutableException e) {
			new ImmutableReaderExceptionResponse(e.getMessage());
		} catch (InUseException e) {
			new InUseExceptionResponse(e.getMessage());
		} catch (NoSuchSensorException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		}
		throw new NonCompositeReaderExceptionResponse("Reader "
				+ parms.getName() + " is not a composite reader.");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType#addReaders
	 * (org.rifidi.edge.ale.api.lr.ws.AddReaders parms )
	 */
	public org.rifidi.edge.ale.api.lr.ws.AddReadersResult addReaders(
			AddReaders parms) throws ReaderLoopExceptionResponse,
			NonCompositeReaderExceptionResponse, SecurityExceptionResponse,
			InUseExceptionResponse, ImplementationExceptionResponse,
			ImmutableReaderExceptionResponse, NoSuchNameExceptionResponse,
			ValidationExceptionResponse {
		logger.info("Executing operation addReaders");
		try {
			sensorManagementService
					.addChildren(parms.getName(), parms.getReaders()
							.getReader());
			return new AddReadersResult();
		} catch (ImmutableException e) {
			new ImmutableReaderExceptionResponse(e.getMessage());
		} catch (InUseException e) {
			new InUseExceptionResponse(e.getMessage());
		} catch (NoSuchSensorException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage());
		}
		throw new NonCompositeReaderExceptionResponse("Reader "
				+ parms.getName() + " is not a composite reader.");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType#update(org
	 * .rifidi.edge.epcglobal.ale.api.lr.ws.Update parms )
	 */
	public org.rifidi.edge.ale.api.lr.ws.UpdateResult update(
			Update parms) throws ReaderLoopExceptionResponse,
			SecurityExceptionResponse, InUseExceptionResponse,
			ImplementationExceptionResponse, ImmutableReaderExceptionResponse,
			NoSuchNameExceptionResponse, ValidationExceptionResponse {
		logger.info("Executing operation update");
		// TODO: implement
		throw new ImplementationExceptionResponse("Not yet implemented.");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType#setReaders
	 * (org.rifidi.edge.ale.api.lr.ws.SetReaders parms )
	 */
	public org.rifidi.edge.ale.api.lr.ws.SetReadersResult setReaders(
			SetReaders parms) throws ReaderLoopExceptionResponse,
			NonCompositeReaderExceptionResponse, SecurityExceptionResponse,
			InUseExceptionResponse, ImplementationExceptionResponse,
			ImmutableReaderExceptionResponse, NoSuchNameExceptionResponse,
			ValidationExceptionResponse {
		logger.info("Executing operation setReaders");
		// TODO: implement.
		throw new ImplementationExceptionResponse("Not yet implemented!");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType#getVendorVersion
	 * (org.rifidi.edge.ale.api.lr.ws.EmptyParms parms )
	 */
	public java.lang.String getVendorVersion(EmptyParms parms)
			throws ImplementationExceptionResponse {
		logger.info("Executing operation getVendorVersion");
		return "1.0";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @seeorg.rifidi.edge.epcglobal.ale.api.lr.ws.ALELRServicePortType#
	 * getLogicalReaderNames(org.rifidi.edge.ale.api.lr.ws.EmptyParms
	 * parms )
	 */
	public org.rifidi.edge.ale.api.lr.ws.ArrayOfString getLogicalReaderNames(
			EmptyParms parms) throws SecurityExceptionResponse,
			ImplementationExceptionResponse {
		logger.info("Executing operation getLogicalReaderNames");
		ArrayOfString ret = new ArrayOfString();
		ret.getString().addAll(sensorManagementService.getSensors());
		return ret;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.rifidi.edge.ale.api.lr.ws.ALELRServicePortType#getPropertyValue
	 * (org.rifidi.edge.ale.api.lr.ws.GetPropertyValue parms )
	 */
	public java.lang.String getPropertyValue(GetPropertyValue parms)
			throws SecurityExceptionResponse, ImplementationExceptionResponse,
			NoSuchNameExceptionResponse {
		logger.info("Executing operation getPropertyValue");
		// TODO: implement
		throw new ImplementationExceptionResponse("Not yet implemented.");
	}

	/**
	 * @param sensorManagementService
	 *            the sensorManagementService to set
	 */
	public void setSensorManagementService(SensorManagementService service) {
		this.sensorManagementService = service;
	}

}
