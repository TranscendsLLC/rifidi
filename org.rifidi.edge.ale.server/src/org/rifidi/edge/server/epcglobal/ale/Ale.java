package org.rifidi.edge.server.epcglobal.ale;


import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.util.logging.Logger;

import org.rifidi.edge.epcglobal.ale.ALEServicePortType;
import org.rifidi.edge.epcglobal.ale.Define;
import org.rifidi.edge.epcglobal.ale.DuplicateNameExceptionResponse;
import org.rifidi.edge.epcglobal.ale.DuplicateSubscriptionExceptionResponse;
import org.rifidi.edge.epcglobal.ale.ECSpecValidationExceptionResponse;
import org.rifidi.edge.epcglobal.ale.EmptyParms;
import org.rifidi.edge.epcglobal.ale.GetECSpec;
import org.rifidi.edge.epcglobal.ale.GetSubscribers;
import org.rifidi.edge.epcglobal.ale.Immediate;
import org.rifidi.edge.epcglobal.ale.ImplementationExceptionResponse;
import org.rifidi.edge.epcglobal.ale.InvalidURIExceptionResponse;
import org.rifidi.edge.epcglobal.ale.NoSuchNameExceptionResponse;
import org.rifidi.edge.epcglobal.ale.NoSuchSubscriberExceptionResponse;
import org.rifidi.edge.epcglobal.ale.Poll;
import org.rifidi.edge.epcglobal.ale.SecurityExceptionResponse;
import org.rifidi.edge.epcglobal.ale.Subscribe;
import org.rifidi.edge.epcglobal.ale.Undefine;
import org.rifidi.edge.epcglobal.ale.Unsubscribe;
import org.rifidi.edge.server.epcglobal.ale.services.ApplicationLevelEventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * This class was generated by Apache CXF 3.1.4
 * 2015-12-12T14:01:05.543-05:00
 * Generated source version: 3.1.4
 * 
 */

@javax.jws.WebService(
                      serviceName = "ALEService",
                      portName = "ALEServicePort",
                      targetNamespace = "urn:epcglobal:ale:wsdl:1",
                      wsdlLocation = "org/rifidi/edge/ale/xsd/EPCglobal-ale-1_1-ale.wsdl",
                      endpointInterface = "org.rifidi.edge.epcglobal.ale.ALEServicePortType")
@Component                
public class Ale implements ALEServicePortType {

	@Autowired
	ApplicationLevelEventService aleService;
	
    private static final Logger LOG = Logger.getLogger(Ale.class.getName());
    
    public Ale(){
    	System.out.println("Ale() call");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#immediate(org.rifidi.edge.epcglobal.ale.Immediate  parms )*
     */
    public org.rifidi.edge.epcglobal.ale.ECReports immediate(Immediate parms) throws ImplementationExceptionResponse , SecurityExceptionResponse , ECSpecValidationExceptionResponse    { 
        LOG.info("Executing operation immediate");
        System.out.println(parms);
        try {
            org.rifidi.edge.epcglobal.ale.ECReports _return = null;
            _return = aleService.immediate(parms.getSpec());
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
        //throw new SecurityExceptionResponse("SecurityExceptionResponse...");
        //throw new ECSpecValidationExceptionResponse("ECSpecValidationExceptionResponse...");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#getECSpecNames(org.rifidi.edge.epcglobal.ale.EmptyParms  parms )*
     */
    public org.rifidi.edge.epcglobal.ale.ArrayOfString getECSpecNames(EmptyParms parms) throws ImplementationExceptionResponse , SecurityExceptionResponse    { 
        LOG.info("Executing operation getECSpecNames");
        System.out.println(parms);
        try {
            org.rifidi.edge.epcglobal.ale.ArrayOfString _return = new org.rifidi.edge.epcglobal.ale.ArrayOfString();
            String[] esSpecNamesArray = aleService.getECSpecNames();
            List<String> list = new ArrayList<String>();
            for (int i = 0; i < esSpecNamesArray.length; i++) {
            	list.add(esSpecNamesArray[i]);
			}
            _return.getString().addAll( list );
            
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
        //throw new SecurityExceptionResponse("SecurityExceptionResponse...");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#undefine(org.rifidi.edge.epcglobal.ale.Undefine  parms )*
     */
    public org.rifidi.edge.epcglobal.ale.VoidHolder undefine(Undefine parms) throws ImplementationExceptionResponse , NoSuchNameExceptionResponse , SecurityExceptionResponse    { 
        LOG.info("Executing operation undefine");
        System.out.println(parms);
        try {
            org.rifidi.edge.epcglobal.ale.VoidHolder _return = new org.rifidi.edge.epcglobal.ale.VoidHolder();
            aleService.undefine(parms.getSpecName());
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
        //throw new NoSuchNameExceptionResponse("NoSuchNameExceptionResponse...");
        //throw new SecurityExceptionResponse("SecurityExceptionResponse...");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#define(org.rifidi.edge.epcglobal.ale.Define  parms )*
     */
    public org.rifidi.edge.epcglobal.ale.VoidHolder define(Define parms) throws ImplementationExceptionResponse , SecurityExceptionResponse , ECSpecValidationExceptionResponse , DuplicateNameExceptionResponse    { 
        LOG.info("Executing operation define");
        System.out.println("Ale.define. Params:");
        System.out.println("parms.getSpecName(): " + parms.getSpecName());
        System.out.println("parms.getSpec(): " + parms.getSpec());
        try {
            org.rifidi.edge.epcglobal.ale.VoidHolder _return = new org.rifidi.edge.epcglobal.ale.VoidHolder();
            aleService.define(parms.getSpecName(), parms.getSpec());
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
        //throw new SecurityExceptionResponse("SecurityExceptionResponse...");
        //throw new ECSpecValidationExceptionResponse("ECSpecValidationExceptionResponse...");
        //throw new DuplicateNameExceptionResponse("DuplicateNameExceptionResponse...");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#unsubscribe(org.rifidi.edge.epcglobal.ale.Unsubscribe  parms )*
     */
    public org.rifidi.edge.epcglobal.ale.VoidHolder unsubscribe(Unsubscribe parms) throws ImplementationExceptionResponse , NoSuchSubscriberExceptionResponse , NoSuchNameExceptionResponse , SecurityExceptionResponse , InvalidURIExceptionResponse    { 
        LOG.info("Executing operation unsubscribe");
        System.out.println(parms);
        try {
            org.rifidi.edge.epcglobal.ale.VoidHolder _return = new org.rifidi.edge.epcglobal.ale.VoidHolder();
            aleService.unsubscribe(parms.getSpecName(), parms.getNotificationURI());
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
        //throw new NoSuchSubscriberExceptionResponse("NoSuchSubscriberExceptionResponse...");
        //throw new NoSuchNameExceptionResponse("NoSuchNameExceptionResponse...");
        //throw new SecurityExceptionResponse("SecurityExceptionResponse...");
        //throw new InvalidURIExceptionResponse("InvalidURIExceptionResponse...");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#poll(org.rifidi.edge.epcglobal.ale.Poll  parms )*
     */
    public org.rifidi.edge.epcglobal.ale.ECReports poll(Poll parms) throws ImplementationExceptionResponse , NoSuchNameExceptionResponse , SecurityExceptionResponse    { 
        LOG.info("Executing operation poll");
        System.out.println(parms);
        try {
            org.rifidi.edge.epcglobal.ale.ECReports _return = null;
            _return = aleService.poll(parms.getSpecName());
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
        //throw new NoSuchNameExceptionResponse("NoSuchNameExceptionResponse...");
        //throw new SecurityExceptionResponse("SecurityExceptionResponse...");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#getSubscribers(org.rifidi.edge.epcglobal.ale.GetSubscribers  parms )*
     */
    public org.rifidi.edge.epcglobal.ale.ArrayOfString getSubscribers(GetSubscribers parms) throws ImplementationExceptionResponse , NoSuchNameExceptionResponse , SecurityExceptionResponse    { 
        LOG.info("Executing operation getSubscribers");
        System.out.println(parms);
        try {
        	org.rifidi.edge.epcglobal.ale.ArrayOfString _return = new org.rifidi.edge.epcglobal.ale.ArrayOfString();
            Set<String> subscriberArray = aleService.getSubscribers(parms.getSpecName());
            List<String> list = new ArrayList<String>();
            for (String sub : subscriberArray) {
            	list.add(sub);
			}
            _return.getString().addAll( list );
            
            return _return;
            
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
        //throw new NoSuchNameExceptionResponse("NoSuchNameExceptionResponse...");
        //throw new SecurityExceptionResponse("SecurityExceptionResponse...");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#subscribe(org.rifidi.edge.epcglobal.ale.Subscribe  parms )*
     */
    public org.rifidi.edge.epcglobal.ale.VoidHolder subscribe(Subscribe parms) throws ImplementationExceptionResponse , NoSuchNameExceptionResponse , SecurityExceptionResponse , InvalidURIExceptionResponse , DuplicateSubscriptionExceptionResponse    { 
        LOG.info("Executing operation subscribe");
        System.out.println(parms);
        try {
            org.rifidi.edge.epcglobal.ale.VoidHolder _return = new org.rifidi.edge.epcglobal.ale.VoidHolder();
            aleService.subscribe(parms.getSpecName(), parms.getNotificationURI());
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
        //throw new NoSuchNameExceptionResponse("NoSuchNameExceptionResponse...");
        //throw new SecurityExceptionResponse("SecurityExceptionResponse...");
        //throw new InvalidURIExceptionResponse("InvalidURIExceptionResponse...");
        //throw new DuplicateSubscriptionExceptionResponse("DuplicateSubscriptionExceptionResponse...");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#getECSpec(org.rifidi.edge.epcglobal.ale.GetECSpec  parms )*
     */
    public org.rifidi.edge.epcglobal.ale.ECSpec getECSpec(GetECSpec parms) throws ImplementationExceptionResponse , NoSuchNameExceptionResponse , SecurityExceptionResponse    { 
        LOG.info("Executing operation getECSpec");
        System.out.println(parms);
        try {
            org.rifidi.edge.epcglobal.ale.ECSpec _return = null;
            _return = aleService.getECSpec(parms.getSpecName());
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
        //throw new NoSuchNameExceptionResponse("NoSuchNameExceptionResponse...");
        //throw new SecurityExceptionResponse("SecurityExceptionResponse...");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#getStandardVersion(org.rifidi.edge.epcglobal.ale.EmptyParms  parms )*
     */
    public java.lang.String getStandardVersion(EmptyParms parms) throws ImplementationExceptionResponse    { 
        LOG.info("Executing operation getStandardVersion");
        System.out.println(parms);
        try {
            java.lang.String _return = "";
            _return = aleService.getStandardVersion();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
    }

    /* (non-Javadoc)
     * @see org.rifidi.edge.epcglobal.ale.ALEServicePortType#getVendorVersion(org.rifidi.edge.epcglobal.ale.EmptyParms  parms )*
     */
    public java.lang.String getVendorVersion(EmptyParms parms) throws ImplementationExceptionResponse    { 
        LOG.info("Executing operation getVendorVersion");
        System.out.println(parms);
        try {
            java.lang.String _return = "";
            _return = aleService.getVendorVersion();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ImplementationExceptionResponse("ImplementationExceptionResponse...");
    }

	public void setAleService(ApplicationLevelEventService aleService) {
		System.out.println("Setting aleservice: " + aleService);
		this.aleService = aleService;
	}
	
	public ApplicationLevelEventService getAleService() {
		return aleService;
	}

}
