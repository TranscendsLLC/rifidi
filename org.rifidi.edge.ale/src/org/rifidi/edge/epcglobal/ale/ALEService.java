package org.rifidi.edge.epcglobal.ale;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.4
 * 2015-12-12T14:01:05.575-05:00
 * Generated source version: 3.1.4
 * 
 */
@WebServiceClient(name = "ALEService", 
                  wsdlLocation = "/src/org/rifidi/edge/ale/xsd/EPCglobal-ale-1_1-ale.wsdl",
                  targetNamespace = "urn:epcglobal:ale:wsdl:1") 
public class ALEService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn:epcglobal:ale:wsdl:1", "ALEService");
    public final static QName ALEServicePort = new QName("urn:epcglobal:ale:wsdl:1", "ALEServicePort");
    static {
        URL url = ALEService.class.getResource("/src/org/rifidi/edge/ale/xsd/EPCglobal-ale-1_1-ale.wsdl");
        if (url == null) {
            url = ALEService.class.getClassLoader().getResource("/src/org/rifidi/edge/ale/xsd/EPCglobal-ale-1_1-ale.wsdl");
        } 
        if (url == null) {
            java.util.logging.Logger.getLogger(ALEService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "/src/org/rifidi/edge/ale/xsd/EPCglobal-ale-1_1-ale.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public ALEService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ALEService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ALEService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public ALEService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public ALEService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public ALEService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns ALEServicePortType
     */
    @WebEndpoint(name = "ALEServicePort")
    public ALEServicePortType getALEServicePort() {
        return super.getPort(ALEServicePort, ALEServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ALEServicePortType
     */
    @WebEndpoint(name = "ALEServicePort")
    public ALEServicePortType getALEServicePort(WebServiceFeature... features) {
        return super.getPort(ALEServicePort, ALEServicePortType.class, features);
    }

}
